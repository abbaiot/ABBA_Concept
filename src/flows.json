[
    {
        "id": "43aadeb7.80972",
        "type": "tab",
        "label": "Transmitter",
        "disabled": false,
        "info": ""
    },
    {
        "id": "41da65a7.a6d27c",
        "type": "tab",
        "label": "Receiver",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f6fcf28c.c9b9",
        "type": "subflow",
        "name": "PRNG",
        "info": "The Mersenne Twister used here was acquired here\nhttps://www.npmjs.com/package/mersenne-twister\nMake sure to do the install in the .node-red folder.\nThen change the settings file in that folder to add\nMersenneTwister: require('mersenne-twister'),\nin functionGlobalContext.\n\n\nIf msg.reseed is set to true, the PRNG is reseeded using the payload and a number is generated.\nIf msg.reseed is false then PRNG is use to draw the next number.",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "8561d7fc.5610f8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 80,
                "wires": [
                    {
                        "id": "b4b3dbb7.7e6a18",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "805e8a3a.2edb48",
        "type": "subflow",
        "name": "signature",
        "info": "This takes as input\nmsg.seed to seed the PRNG\nmsg.reseed a Boolean to specify whether to reseed the PRNG.\nmsg.lambda the parameter of the exponentially distributed number to be output.\n\nThis outputs the number generated in msg.payload",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "8130559e.98cc28"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 80,
                "wires": [
                    {
                        "id": "60a270bd.d99e6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "7c33392d.7e4d78",
        "type": "subflow",
        "name": "ABBA_Tx",
        "info": "This takes as input\n•\tmsg.seed to seed the PRNG\n•\tmsg.reseed a boolean to decide whether to renew the seed of the PRNG\n•\tmsg.lambda the parameter of the exponentially distributed number to be output.\n•\tmsg.stop a boolean that stops the flow if set to \"true\" and let it run if set to \"false\".\n\n\nThis subflow outputs \n•\tThe generated signatures in  msg.signature.\n•\tThe timestamp of transmission of the signatures in msg.timestamp.\n•\tThe count of signatures generated using the same seed in msg.count.\n•\tA topic to identify its messages in msg.topic.\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "8dc81832.0a0458"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1200,
                "y": 80,
                "wires": [
                    {
                        "id": "c2cb1e05.fc601",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "a456d7cf.eba3d8",
        "type": "subflow",
        "name": "ABBA_adapter",
        "info": "This subflow takes as input:\r\n•\tMsg.payload: The payload from the sensor\r\n•\tMsg.internal_state: A number representing the value of the internal state.\r\n•\tMsg.count: The number of RN generated by ABBA_Tx or ABBA_Rx.\r\n•\tMsg.stop: A Boolean to control ABBA_Tx.\r\n•\tMsg.topic: a string that identifies the origin of the message received.\r\n    o\t“sensor” for messages coming from the sensor. These messages contain a topic and a payload.\r\n    o\t“control” for parameters used for the algorithm. These messages contain a msg.topic, a msg.batch_size determining the number of messages treated at once, an msg.internal_state which sets the initial value for this parameter,  a msg.stop that controls the generation of signatures.\r\n    o\t“abba” which comes with msg.count, the number of RN generated with the same seed.\r\n\r\nIt outputs:\r\n•\tmsg.seed to seed the PRNG ABBA_Tx/Rx.\r\n•\tmsg.reseed a boolean to decide whether to renew the seed of the PRNG\r\n•\tmsg.lambda the parameter of the exponentially distributed number to be output.\r\n•\tmsg.stop a boolean that stops the flow if set to \"true\" and let it run if set to \"false\".\r\n\r\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 160,
                "wires": [
                    {
                        "id": "f58362f7.e55a3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 160,
                "wires": [
                    {
                        "id": "6591f049.7546e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "9aceb522.2088b8",
        "type": "subflow",
        "name": "ABBA_Rx",
        "info": "This subflow detects anomalies in the stream received from the sensor. \r\nThe inputs to this subflow are:\r\n•\tmsg.seed to seed the PRNG ABBA_Tx/Rx.\r\n•\tmsg.reseed a boolean to decide whether to renew the seed of the PRNG\r\n•\tmsg.lambda the parameter of the exponentially distributed number to be output.\r\n•\tmsg.rcv_sig the signature received from the monitored device.\r\n•\tmsg.max_delay the maximum delay expected for messages in the communication channel. (The arbitration process on the CAN bus can create such delay)\r\nThe outputs are:\r\n•\tmsg.topic this is set to “abba”.\r\n•\tMsg.count, this gives the number of consecutive RN produced with the same seed.\r\n•\tMsg.anomaly, this is a Boolean which is “true” when an anomaly was detected “false” otherwise.\r\n•\tMsg.anomaly_type, is a string that describe the anomaly, “delay” when it’s due to a delay greater that the max allowed in the reception of the signature. “bad_signature” if the received signature doesn’t match the expected one.\r\n•\tMsg.timestamp, is a number representing the time when the anomaly was generated.\r\n* Msg.rxsignature, is a number representing the current signature computed by ABBA_Rx\r\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 200,
                "wires": [
                    {
                        "id": "837a7c82.5e511"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1240,
                "y": 260,
                "wires": [
                    {
                        "id": "d87893d3.d16d4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "aaab56b6.21c068",
        "type": "subflow",
        "name": "Detect anomalies",
        "info": "This subflow takes as input:\r\n•\tMsg.payload: The payload from the sensor\r\n•\tMsg.internal_state: A number representing the value of the internal state.\r\n•\tMsg.stop: A Boolean to control ABBA_Tx.\r\n•\tMsg.lambda: The parameter of the exponential distribution used.\r\n•\tMsg.id: A number that uniquely identifies the sensor.\r\n•\tMsg.batch_size: A control parameter that defines how many messages are collected by ABBA_adapter before being processed.\r\n•\tMsg.max_delay: A number that specify the maximum additional time to wait for a signature before issuing an anomaly.\r\n•\tMsg.topic: a string that identifies the origin of the message received.\r\no\t“sensor” for messages coming from the sensor. These messages contain a topic and a payload.\r\no\t“control” for parameters used for the algorithm. These messages contain a msg.topic, a msg.batch_size determining the number of messages treated at once, an msg.internal_state which sets the initial value for this parameter,  a msg.stop that controls the generation of signatures, msg.lambda the initial parameter of the exponential distribution being used.\r\n\r\nThe outputs are:\r\n•\tmsg.topic this is set to “abba”.\r\n•\tMsg.count, this gives the number of consecutive RN produced with the same seed.\r\n•\tMsg.anomaly, this is a Boolean which is “true” when an anomaly was detected “false” otherwise.\r\n•\tMsg.anomaly_type, is a string that describe the anomaly, “delay” when it’s due to a delay greater that the max allowed in the reception of the signature. “bad_signature” if the received signature doesn’t match the expected one.\r\n•\tMsg.rxsignature, the signatures computed by the receiver.\r\n",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 200,
                "wires": [
                    {
                        "id": "81d67b86.103a88"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 80,
                "wires": [
                    {
                        "id": "5ace5d48.57e144",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "27edefde.ffc9b",
        "type": "subflow",
        "name": "Heartbeat",
        "info": "This subflow takes as input:\r\n•\tMsg.payload: The payload from the sensor\r\n•\tMsg.internal_state: A number representing the value of the internal state.\r\n•\tMsg.stop: A Boolean to control ABBA_Tx.\r\n•\tMsg.lambda: The parameter of the exponential distribution used.\r\n•\tMsg.id: A number that uniquely identifies the sensor.\r\n•\tMsg.batch_size: A control parameter that defines how many messages are collected by ABBA_adapter before being processed.\r\n•\tMsg.topic: a string that identifies the origin of the message received.\r\no\t“sensor” for messages coming from the sensor. These messages contain a topic and a payload.\r\no\t“control” for parameters used for the algorithm. These messages contain a msg.topic, a msg.batch_size determining the number of messages treated at once, an msg.internal_state which sets the initial value for this parameter,  a msg.stop that controls the generation of signatures, msg.lambda the initial parameter of the exponential distribution being used.\r\n\r\nThe output is the same as the input with additional messages on the topic “abba” which contains msg.signature, msg.timestamp and msg.count.\r\n",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 100,
                "wires": [
                    {
                        "id": "cffad26c.463dc"
                    },
                    {
                        "id": "86763fe6.9664f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 920,
                "y": 100,
                "wires": [
                    {
                        "id": "86763fe6.9664f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "a78ae872.2b6658",
        "type": "subflow",
        "name": "Signature_Check",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "e3b3b025.4707f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 220,
                "wires": [
                    {
                        "id": "641fc90a.0052a8",
                        "port": 0
                    },
                    {
                        "id": "ee9b800c.53826",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "b3988723.f67978",
        "type": "ui_tab",
        "name": "Demo: ABBA-IoT",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7bc1122e.a2ad7c",
        "type": "ui_group",
        "name": "Controls",
        "tab": "b3988723.f67978",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "149fa8bf.f8d847",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "d9823659.771a48",
        "type": "ui_group",
        "name": "Speed",
        "tab": "b3988723.f67978",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "b60e70be.472bc",
        "type": "ui_group",
        "name": "RPM",
        "tab": "b3988723.f67978",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d624bd30.80f3c",
        "type": "ui_group",
        "name": "Monitoring",
        "tab": "b3988723.f67978",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4f09afaa.a6fae",
        "type": "ui_group",
        "name": "Attacker",
        "tab": "b3988723.f67978",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "b4b3dbb7.7e6a18",
        "type": "function",
        "z": "f6fcf28c.c9b9",
        "name": "MT",
        "func": "var generator = flow.get('generator'); //get the MT generator created in setup\nmsg.payload = generator.random();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nvar MersenneTwister=global.get('MersenneTwister'); //get the module MersenneTwister\nvar generator = new MersenneTwister(); //create an instance of MT to generate RN\nflow.set('generator',generator); // Make this instance visible to the functions of this flow",
        "finalize": "",
        "x": 430,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "74b67b92.16eca4",
        "type": "function",
        "z": "f6fcf28c.c9b9",
        "name": "Reset MT",
        "func": "var generator=flow.get('generator'); //get the MT generator created by MT\ngenerator.init_seed(msg.seed); // initialise the seed using msg.seed\nreturn msg; // forward the msg to next node",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 200,
        "wires": [
            [
                "b4b3dbb7.7e6a18"
            ]
        ]
    },
    {
        "id": "8561d7fc.5610f8",
        "type": "function",
        "z": "f6fcf28c.c9b9",
        "name": "Select",
        "func": "if(msg.reseed === true){\n    return[null,msg]; //go to Reset MT if reseed is true\n}else{\n    return [msg, null]; //Generate next RN if reseed is false\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "b4b3dbb7.7e6a18"
            ],
            [
                "74b67b92.16eca4"
            ]
        ]
    },
    {
        "id": "8130559e.98cc28",
        "type": "subflow:f6fcf28c.c9b9",
        "z": "805e8a3a.2edb48",
        "name": "PRNG",
        "env": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "60a270bd.d99e6"
            ]
        ]
    },
    {
        "id": "60a270bd.d99e6",
        "type": "function",
        "z": "805e8a3a.2edb48",
        "name": "Exp_dist",
        "func": "msg.payload = -Math.log(1-msg.payload)/msg.lambda;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 80,
        "wires": [
            []
        ],
        "info": "This function changes the message payload from uniform distribution to exponential distribution with parameter msg.lambda."
    },
    {
        "id": "2e7ddccb.536f44",
        "type": "subflow:805e8a3a.2edb48",
        "z": "7c33392d.7e4d78",
        "name": "",
        "env": [],
        "x": 420,
        "y": 80,
        "wires": [
            [
                "54057fb2.53143"
            ]
        ]
    },
    {
        "id": "54057fb2.53143",
        "type": "function",
        "z": "7c33392d.7e4d78",
        "name": "sec+count",
        "func": "msg.delay = msg.payload*1000; // give the exp RN as a delay in seconds\nmsg.count = msg.count+1; // count how many RN were generated with the same seed\nreturn msg;//forward message",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 80,
        "wires": [
            [
                "aae02067.154fe"
            ]
        ]
    },
    {
        "id": "aae02067.154fe",
        "type": "delay",
        "z": "7c33392d.7e4d78",
        "name": "",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 880,
        "y": 80,
        "wires": [
            [
                "e0349aa2.c23d28",
                "c2cb1e05.fc601"
            ]
        ]
    },
    {
        "id": "84fc725b.3bce7",
        "type": "function",
        "z": "7c33392d.7e4d78",
        "name": "New event",
        "func": "\nreturn {reset: true}; // stop next signature from being sent",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 510,
        "y": 260,
        "wires": [
            [
                "aae02067.154fe"
            ]
        ]
    },
    {
        "id": "e0349aa2.c23d28",
        "type": "change",
        "z": "7c33392d.7e4d78",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reseed",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 260,
        "wires": [
            [
                "2e7ddccb.536f44"
            ]
        ]
    },
    {
        "id": "8dc81832.0a0458",
        "type": "function",
        "z": "7c33392d.7e4d78",
        "name": "Control",
        "func": "if (msg.stop === true){\n    return [null,msg];//stops the signature generation.\n}else{ msg.count=0; //resetting the counter of RN produced.\nreturn [msg,msg]; // forward incoming msg.\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "2e7ddccb.536f44"
            ],
            [
                "84fc725b.3bce7"
            ]
        ],
        "info": "This function enables stoping the signature generation."
    },
    {
        "id": "c2cb1e05.fc601",
        "type": "function",
        "z": "7c33392d.7e4d78",
        "name": "Output",
        "func": "\nreturn {signature:msg.payload,count:msg.count,timestamp:Date.now(),topic:\"abba\"};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1070,
        "y": 80,
        "wires": [
            []
        ],
        "info": "Selects the signature, adds a timestamp and increment the msg.count which counts the number of messages generated with the same seed."
    },
    {
        "id": "f394a79a.1267d8",
        "type": "subflow:7c33392d.7e4d78",
        "z": "27edefde.ffc9b",
        "name": "ABBA_Tx",
        "env": [],
        "x": 560,
        "y": 220,
        "wires": [
            [
                "cffad26c.463dc",
                "86763fe6.9664f"
            ]
        ]
    },
    {
        "id": "f58362f7.e55a3",
        "type": "switch",
        "z": "a456d7cf.eba3d8",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensor",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "control",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "abba",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 190,
        "y": 160,
        "wires": [
            [
                "607eca5f.c9db14"
            ],
            [
                "587771e0.46abe"
            ],
            [
                "2b937509.a75bca"
            ]
        ]
    },
    {
        "id": "607eca5f.c9db14",
        "type": "function",
        "z": "a456d7cf.eba3d8",
        "name": "Update IS",
        "func": "//var batch_s = flow.get('batch_s'); //get the number of messages processed at once\nvar IS = flow.get('internal_state'); // get the current value of the internal state\nvar n_lambda = flow.get('lambda');// get the current value of lambda.\nconst precision = context.get('precision');// get the upper limit of IS\n//var c_batch = context.get('c_batch'); // get previous messages in the current batch.\n//c_batch.push(msg.payload); // Add newly received message to the batch\n//cb_length = c_batch.length;\n\nIS ^= msg.payload; //Updating IS\nIS = (IS+1) << 1;\nIS %= precision; //Limiting the upper value of IS\nflow.set('internal_state',IS);//store value for next use\nreturn {seed:IS,reseed:true,lambda:n_lambda,stop:false}; // Send new seed to ABBA\n\n/*if (cb_length===batch_s){\n    \n    // do some calculations with the messages to update seed and IS\n    // This will need more work and adapting to given sensor.\n    var i;\n    var fprint=0;\n    for(i=0;i<cb_length;i++){\n        fprint+=c_batch[i];\n    }\n    IS ^= fprint; //Updating IS\n    IS %= precision; //Limiting the upper value of IS\n    flow.set('internal_state',IS);//store value for next use\n    //end of update calculations\n    \n    context.set('c_batch',[]);//Empty batch\n    return {seed:IS,reseed:true,lambda:n_lambda,stop:false}; // Send new seed to ABBA\n}else{\n    context.set('c_batch',c_batch); // Update the current batch in the function context for future use.\n    return null;//Send nothing\n}*/\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\n//var current_batch = [];\n//context.set('c_batch',current_batch); //content of current batch\ncontext.set('precision',Math.pow(2,32)); //Max value of 32bit+1",
        "finalize": "",
        "x": 420,
        "y": 80,
        "wires": [
            [
                "6591f049.7546e"
            ]
        ]
    },
    {
        "id": "587771e0.46abe",
        "type": "function",
        "z": "a456d7cf.eba3d8",
        "name": "Init adapter",
        "func": "//This function sets the parameters for the adapter\nflow.set('batch_s',msg.batch_size);\nflow.set('internal_state',msg.internal_state);\nflow.set('lambda',msg.lambda);\nflow.set('stop',msg.stop);\n\nif (msg.stop===true){\n    return {stop:true};//stop signature generation.\n}else{\nreturn null; \n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nvar initial_internal_state = 0xAABBCDEF;\nvar batch_size = 1;// Default number of msg before IS update.\nvar lambda = 0.5; // Default parameter for the signatures.\nvar max_count = 623;// Max number of signatures with the same seed.\n//Setting the variable available to the entire flow.\nflow.set('batch_s',batch_size);\nflow.set('internal_state',initial_internal_state);\nflow.set('lambda',lambda);\nflow.set('max_count',max_count);",
        "finalize": "",
        "x": 430,
        "y": 160,
        "wires": [
            [
                "6591f049.7546e"
            ]
        ]
    },
    {
        "id": "2b937509.a75bca",
        "type": "function",
        "z": "a456d7cf.eba3d8",
        "name": "Refresh Seed",
        "func": "// What to do if max_count is reached\nvar m_count = flow.get('max_count');\nif(m_count===msg.count){\n    return {seed:12345,reseed:true,lambda:flow.get('lambda'),stop:false};\n}else{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 240,
        "wires": [
            [
                "6591f049.7546e"
            ]
        ]
    },
    {
        "id": "6591f049.7546e",
        "type": "function",
        "z": "a456d7cf.eba3d8",
        "name": "To ABBA",
        "func": "\nreturn msg;// forwards received msg to next node.",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "cffad26c.463dc",
        "type": "subflow:a456d7cf.eba3d8",
        "z": "27edefde.ffc9b",
        "name": "",
        "env": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "f394a79a.1267d8"
            ]
        ]
    },
    {
        "id": "bcaf7fee.d4aed",
        "type": "subflow:805e8a3a.2edb48",
        "z": "9aceb522.2088b8",
        "name": "",
        "env": [],
        "x": 520,
        "y": 100,
        "wires": [
            [
                "c2cae85f.8408c8"
            ]
        ]
    },
    {
        "id": "c2cae85f.8408c8",
        "type": "function",
        "z": "9aceb522.2088b8",
        "name": "Wait time + RN count",
        "func": "//This function defines the waiting time for the signature to be received as well as the time adjusted for hardware imperfections.\nmsg.delay = msg.payload*1000 + flow.get('max_delay'); // give the exp RN as a delay in seconds plus 100 max_delay\nvar count = flow.get('count')+1; // increment the number of RN generated with the same seed.\nvar clock_msm = flow.get('clock_mismatch'); //Max clock speed mismatch\nflow.set('count',count);// count how many RN were generated with the same seed\nflow.set('signature',msg.payload); // Making the signature available to other functions.\nflow.set('signature_time',Date.now()+msg.payload*1000-clock_msm); //Expected time with margin due to clock speed drift\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 100,
        "wires": [
            [
                "ad459fa6.93288"
            ]
        ]
    },
    {
        "id": "ad459fa6.93288",
        "type": "delay",
        "z": "9aceb522.2088b8",
        "name": "",
        "pauseType": "delayv",
        "timeout": "24",
        "timeoutUnits": "hours",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 860,
        "y": 180,
        "wires": [
            [
                "ac03de76.0d67e"
            ]
        ]
    },
    {
        "id": "45766856.acda18",
        "type": "function",
        "z": "9aceb522.2088b8",
        "name": "Reset timer",
        "func": "//resetting the timer\nreturn {reset: true}; // resets delay anomaly counter.",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 200,
        "wires": [
            [
                "ad459fa6.93288"
            ]
        ]
    },
    {
        "id": "c915cfa7.8975d",
        "type": "function",
        "z": "9aceb522.2088b8",
        "name": "Flow params",
        "func": "    //Setting flow parameters\n    var count = 0;//Set the count of RN generated from the same seed to 0.\n    flow.set('count',count); //resetting the counter of RN produced.\n    flow.set('max_delay',msg.max_delay); // Setting the max delay for delay anomaly.\n    flow.set('lambda',msg.lambda); // Setting the parameter to use with the exponential distribution.\n    flow.set('clock_mismatch',msg.clc_msm); // Setting the max time speed difference btw Tx and Rx.\n    return msg; // Forward msg.\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\nflow.set('max_delay',500); // Default maximum delay if not set.\nflow.set('clock_mismatch',10); // Setting the max time speed difference btw Tx and Rx.",
        "finalize": "",
        "x": 310,
        "y": 100,
        "wires": [
            [
                "bcaf7fee.d4aed"
            ]
        ],
        "info": "This function enables stoping the signature generation."
    },
    {
        "id": "ac03de76.0d67e",
        "type": "function",
        "z": "9aceb522.2088b8",
        "name": "Delay anomaly",
        "func": "// Generate an anomaly message if the maximum delay to receive a signature is exceded \nreturn { anomaly:true,anomaly_type: \"delay\"};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1040,
        "y": 180,
        "wires": [
            [
                "d87893d3.d16d4"
            ]
        ],
        "info": "Selects the signature, adds a timestamp and increment the msg.count which counts the number of messages generated with the same seed."
    },
    {
        "id": "837a7c82.5e511",
        "type": "switch",
        "z": "9aceb522.2088b8",
        "name": "",
        "property": "reseed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 200,
        "wires": [
            [
                "45766856.acda18",
                "c915cfa7.8975d"
            ],
            [
                "45766856.acda18",
                "5321a50e.0bd26c"
            ]
        ]
    },
    {
        "id": "5321a50e.0bd26c",
        "type": "function",
        "z": "9aceb522.2088b8",
        "name": "Check sig",
        "func": "//This functions verifies that the signature received and expected match\nvar cur_sig = flow.get('signature'); //getting current signature\nvar exp_time_sig = flow.get('signature_time'); //getting the expected time for the signature\nmsg.lambda = flow.get('lambda'); // getting the lambda to be used to generate signatures\nif (msg.rcv_sig_time>=exp_time_sig){//Allow for clock drift\n    return[msg,{anomaly:false,anomaly_type:\"bad_signature\"}];// Generate the next signature\n}else{\n    return[msg,{anomaly:true,anomaly_type:\"bad_signature\"}]; //Signal an anomaly\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 260,
        "wires": [
            [
                "bcaf7fee.d4aed"
            ],
            [
                "d87893d3.d16d4"
            ]
        ]
    },
    {
        "id": "d87893d3.d16d4",
        "type": "function",
        "z": "9aceb522.2088b8",
        "name": "Reporting",
        "func": "//Adding additional msg to the anomaly messages received\nmsg.count = flow.get('count'); //add RN count to the output msg\nmsg.topic = \"abba\"; //add topic to the output message\nmsg.timestamp = Date.now(); //add timestamp to the output msg\nmsg.rxsignature = flow.get('signature'); // Send the current signature out\nreturn msg; //return msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1060,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a0e495f4.8e59e8",
        "type": "debug",
        "z": "41da65a7.a6d27c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "anomaly",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 340,
        "wires": []
    },
    {
        "id": "58326e83.84ed1",
        "type": "debug",
        "z": "41da65a7.a6d27c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "anomaly_type",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 380,
        "wires": []
    },
    {
        "id": "5ace5d48.57e144",
        "type": "subflow:9aceb522.2088b8",
        "z": "aaab56b6.21c068",
        "name": "",
        "env": [],
        "x": 900,
        "y": 80,
        "wires": [
            [
                "81a9d9b.760c228"
            ]
        ]
    },
    {
        "id": "81a9d9b.760c228",
        "type": "subflow:a456d7cf.eba3d8",
        "z": "aaab56b6.21c068",
        "name": "",
        "env": [],
        "x": 380,
        "y": 80,
        "wires": [
            [
                "5c54600d.b2807"
            ]
        ]
    },
    {
        "id": "81d67b86.103a88",
        "type": "switch",
        "z": "aaab56b6.21c068",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensor",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "control",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "abba",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 190,
        "y": 200,
        "wires": [
            [
                "81a9d9b.760c228"
            ],
            [
                "38b3aa9a.743206"
            ],
            [
                "9b4f0f3c.53d81"
            ]
        ]
    },
    {
        "id": "86763fe6.9664f",
        "type": "function",
        "z": "27edefde.ffc9b",
        "name": "Send",
        "func": "//This function adds the sensor id to the messages sent by each sensor. That id is stored from the control message receive at initialisation\nif (msg.topic==='control'){\n    context.set('sensor_id',msg.id); // Save the sensor id for futur use.\n    return msg;\n}else{\n    msg.id = context.get('sensor_id'); // Add the sensor id to the message.\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\ncontext.set('sensor_id',0); //default sensor id",
        "finalize": "",
        "x": 730,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "9b4f0f3c.53d81",
        "type": "function",
        "z": "aaab56b6.21c068",
        "name": "Rcv signature",
        "func": "//Sending the received signature to ABBA_Rx for comparison with the expected value.\nreturn {rcv_sig_time:msg.timestamp,rcv_sig:msg.signature, reseed:false}; // reseed set to false to maintain the current state of the PRNG",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 240,
        "wires": [
            [
                "5ace5d48.57e144"
            ]
        ]
    },
    {
        "id": "38b3aa9a.743206",
        "type": "function",
        "z": "aaab56b6.21c068",
        "name": "Store param",
        "func": "//Store parameter for access by the entire flow\nflow.set('lambda',msg.lambda);\nflow.set('max_delay',msg.max_delay);\nflow.set('clock_ms',msg.clc_msm);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "81a9d9b.760c228"
            ]
        ]
    },
    {
        "id": "606dec09.414644",
        "type": "link out",
        "z": "43aadeb7.80972",
        "name": "",
        "links": [
            "e3bd7b37.668058",
            "d395d8b2.71b9c8"
        ],
        "x": 1035,
        "y": 280,
        "wires": []
    },
    {
        "id": "e3bd7b37.668058",
        "type": "link in",
        "z": "41da65a7.a6d27c",
        "name": "",
        "links": [
            "606dec09.414644"
        ],
        "x": 55,
        "y": 180,
        "wires": [
            [
                "9e9a2d5d.64022"
            ]
        ]
    },
    {
        "id": "f6a8e9f0.50dd38",
        "type": "function",
        "z": "41da65a7.a6d27c",
        "name": "add max_delay2control",
        "func": "//This function is used by the network controller to adjust how long of a delay is acceptable in the channel\nif(msg.topic==='control'){\n    msg.max_delay = 500;\n    msg.clc_msm = 50;\n    // Accounting for clock speed difference\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 510,
        "y": 360,
        "wires": [
            [
                "583f7228.26f50c"
            ]
        ]
    },
    {
        "id": "5c54600d.b2807",
        "type": "function",
        "z": "aaab56b6.21c068",
        "name": "set msg.max_delay",
        "func": "//Setting the maximum delay for the reception of signatures.\nmsg.max_delay = flow.get('max_delay');//Getting max_delay from flow parameters\nmsg.clc_msm=flow.get('clock_ms'); //Getting max speed drift.\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 630,
        "y": 80,
        "wires": [
            [
                "5ace5d48.57e144"
            ]
        ]
    },
    {
        "id": "583f7228.26f50c",
        "type": "subflow:aaab56b6.21c068",
        "z": "41da65a7.a6d27c",
        "name": "",
        "env": [],
        "x": 770,
        "y": 360,
        "wires": [
            [
                "7adeeba4.f57784",
                "d643602c.f1c0d",
                "a0e495f4.8e59e8",
                "58326e83.84ed1"
            ]
        ]
    },
    {
        "id": "801ec4e8.1c2768",
        "type": "subflow:27edefde.ffc9b",
        "z": "43aadeb7.80972",
        "name": "",
        "env": [],
        "x": 420,
        "y": 280,
        "wires": [
            [
                "606dec09.414644"
            ]
        ]
    },
    {
        "id": "9e9a2d5d.64022",
        "type": "switch",
        "z": "41da65a7.a6d27c",
        "name": "Which sensor",
        "property": "id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 280,
        "y": 420,
        "wires": [
            [
                "f6a8e9f0.50dd38",
                "b1a9498c.185798",
                "f5a3e8a3.13cb48"
            ],
            [
                "2636a94a.fb79e6",
                "af00aa98.65d228"
            ]
        ]
    },
    {
        "id": "2636a94a.fb79e6",
        "type": "function",
        "z": "41da65a7.a6d27c",
        "name": "add max_delay2control",
        "func": "//This function is used by the network controller to adjust how long of a delay is acceptable in the channel\nif(msg.topic==='control'){\n    msg.max_delay = 500;\n    msg.clc_msm = 50; // Accounting for clock speed difference\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 510,
        "y": 500,
        "wires": [
            [
                "5544eb2e.665604"
            ]
        ]
    },
    {
        "id": "5544eb2e.665604",
        "type": "subflow:aaab56b6.21c068",
        "z": "41da65a7.a6d27c",
        "name": "",
        "env": [],
        "x": 770,
        "y": 500,
        "wires": [
            [
                "9feed813.9d7548"
            ]
        ]
    },
    {
        "id": "b1a9498c.185798",
        "type": "switch",
        "z": "41da65a7.a6d27c",
        "name": "Sensor data",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensor",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 400,
        "wires": [
            [
                "3fdcd4c1.47fecc"
            ]
        ]
    },
    {
        "id": "af00aa98.65d228",
        "type": "switch",
        "z": "41da65a7.a6d27c",
        "name": "Sensor data",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensor",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 540,
        "wires": [
            [
                "3d6f14e6.326adc"
            ]
        ]
    },
    {
        "id": "3fdcd4c1.47fecc",
        "type": "ui_gauge",
        "z": "41da65a7.a6d27c",
        "name": "",
        "group": "d9823659.771a48",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Speed",
        "label": "MPH",
        "format": "{{value}}",
        "min": 0,
        "max": "240",
        "colors": [
            "#e6e600",
            "#e6e600",
            "#e6e600"
        ],
        "seg1": "",
        "seg2": "",
        "x": 670,
        "y": 400,
        "wires": []
    },
    {
        "id": "3d6f14e6.326adc",
        "type": "ui_gauge",
        "z": "41da65a7.a6d27c",
        "name": "",
        "group": "b60e70be.472bc",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "RPM",
        "label": "RPM",
        "format": "{{value}}",
        "min": 0,
        "max": "8",
        "colors": [
            "#00b500",
            "#00b500",
            "#00b500"
        ],
        "seg1": "",
        "seg2": "",
        "x": 670,
        "y": 540,
        "wires": []
    },
    {
        "id": "c1f241e9.66542",
        "type": "ui_slider",
        "z": "43aadeb7.80972",
        "name": "",
        "label": "Speed",
        "tooltip": "",
        "group": "7bc1122e.a2ad7c",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "sensor",
        "min": 0,
        "max": "240",
        "step": 1,
        "x": 110,
        "y": 280,
        "wires": [
            [
                "801ec4e8.1c2768"
            ]
        ]
    },
    {
        "id": "a0019cd4.55a95",
        "type": "ui_slider",
        "z": "43aadeb7.80972",
        "name": "",
        "label": "RPM",
        "tooltip": "",
        "group": "7bc1122e.a2ad7c",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "sensor",
        "min": 0,
        "max": "8",
        "step": 1,
        "x": 110,
        "y": 460,
        "wires": [
            [
                "ec35efdb.bea9"
            ]
        ]
    },
    {
        "id": "ec35efdb.bea9",
        "type": "subflow:27edefde.ffc9b",
        "z": "43aadeb7.80972",
        "name": "",
        "env": [],
        "x": 420,
        "y": 460,
        "wires": [
            [
                "606dec09.414644"
            ]
        ]
    },
    {
        "id": "9feed813.9d7548",
        "type": "function",
        "z": "41da65a7.a6d27c",
        "name": "RPM status",
        "func": "if (msg.anomaly === true){\n    return {payload:'Anomaly detected'};\n}else{\n    return {payload: 'Normal'}\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 970,
        "y": 500,
        "wires": [
            [
                "a1f4e557.4a2148"
            ]
        ]
    },
    {
        "id": "de404ab4.8cb3e8",
        "type": "ui_slider",
        "z": "43aadeb7.80972",
        "name": "",
        "label": "Speed",
        "tooltip": "",
        "group": "4f09afaa.a6fae",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "sensor",
        "min": 0,
        "max": "240",
        "step": 1,
        "x": 710,
        "y": 480,
        "wires": [
            [
                "d5140c7e.c367e"
            ]
        ]
    },
    {
        "id": "d5140c7e.c367e",
        "type": "function",
        "z": "43aadeb7.80972",
        "name": "Add ID",
        "func": "msg.id = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 920,
        "y": 480,
        "wires": [
            [
                "606dec09.414644"
            ]
        ]
    },
    {
        "id": "8058e54e.945188",
        "type": "ui_slider",
        "z": "43aadeb7.80972",
        "name": "",
        "label": "RPM",
        "tooltip": "",
        "group": "4f09afaa.a6fae",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "sensor",
        "min": 0,
        "max": "8",
        "step": 1,
        "x": 710,
        "y": 540,
        "wires": [
            [
                "4bd4073e.fed198"
            ]
        ]
    },
    {
        "id": "4bd4073e.fed198",
        "type": "function",
        "z": "43aadeb7.80972",
        "name": "Add ID",
        "func": "msg.id = 2;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 910,
        "y": 540,
        "wires": [
            [
                "606dec09.414644"
            ]
        ]
    },
    {
        "id": "6474f118.d95a",
        "type": "ui_text",
        "z": "41da65a7.a6d27c",
        "group": "d624bd30.80f3c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Speed status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1130,
        "y": 280,
        "wires": []
    },
    {
        "id": "7adeeba4.f57784",
        "type": "function",
        "z": "41da65a7.a6d27c",
        "name": "Speed status",
        "func": "if (msg.anomaly === true){\n    return {payload:'Anomaly detected'};\n}else{\n    return {payload: 'Normal'}\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 970,
        "y": 280,
        "wires": [
            [
                "6474f118.d95a"
            ]
        ]
    },
    {
        "id": "1843fd57.6a17d3",
        "type": "ui_button",
        "z": "43aadeb7.80972",
        "name": "",
        "group": "7bc1122e.a2ad7c",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Sync speed",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 90,
        "y": 340,
        "wires": [
            [
                "b7a392d0.43877"
            ]
        ]
    },
    {
        "id": "cf422fbb.f76c1",
        "type": "ui_button",
        "z": "43aadeb7.80972",
        "name": "",
        "group": "7bc1122e.a2ad7c",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Sync RPM",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 90,
        "y": 520,
        "wires": [
            [
                "9cfe28b4.5acaf8"
            ]
        ]
    },
    {
        "id": "b7a392d0.43877",
        "type": "change",
        "z": "43aadeb7.80972",
        "name": "Control speed",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "batch_size",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "internal_state",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "stop",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "lambda",
                "pt": "msg",
                "to": "0.5",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 340,
        "wires": [
            [
                "801ec4e8.1c2768"
            ]
        ]
    },
    {
        "id": "9cfe28b4.5acaf8",
        "type": "change",
        "z": "43aadeb7.80972",
        "name": "Control RPM",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "batch_size",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "internal_state",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "stop",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "lambda",
                "pt": "msg",
                "to": "0.5",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "id",
                "pt": "msg",
                "to": "2",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 520,
        "wires": [
            [
                "ec35efdb.bea9"
            ]
        ]
    },
    {
        "id": "a1f4e557.4a2148",
        "type": "ui_text",
        "z": "41da65a7.a6d27c",
        "group": "d624bd30.80f3c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "RPM status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1130,
        "y": 500,
        "wires": []
    },
    {
        "id": "dd24c814.3954c8",
        "type": "comment",
        "z": "43aadeb7.80972",
        "name": "Hacker's blocks",
        "info": "The blocks below belong to the hacker",
        "x": 850,
        "y": 440,
        "wires": []
    },
    {
        "id": "9cc348dd.236538",
        "type": "change",
        "z": "41da65a7.a6d27c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "signature",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "received",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 300,
        "wires": [
            [
                "b73dcdc9.dbc27"
            ]
        ]
    },
    {
        "id": "f5a3e8a3.13cb48",
        "type": "switch",
        "z": "41da65a7.a6d27c",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "abba",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 430,
        "y": 300,
        "wires": [
            [
                "9cc348dd.236538"
            ]
        ]
    },
    {
        "id": "b73dcdc9.dbc27",
        "type": "ui_chart",
        "z": "41da65a7.a6d27c",
        "name": "",
        "group": "d624bd30.80f3c",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Behaviour analysis",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff7f0e",
            "#ade4ff",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1150,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "d643602c.f1c0d",
        "type": "change",
        "z": "41da65a7.a6d27c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "rxsignature",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "local",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 220,
        "wires": [
            [
                "b73dcdc9.dbc27"
            ]
        ]
    },
    {
        "id": "fcdeaf38.bf96b",
        "type": "function",
        "z": "a78ae872.2b6658",
        "name": "Set pulse time",
        "func": "flow.set('expected_time', Date.now()); //Expected time of pulse.\nreturn {delay:11}; //Time in millisec + allowed delay",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 160,
        "wires": [
            [
                "875e341f.2afb58"
            ]
        ]
    },
    {
        "id": "e3b3b025.4707f",
        "type": "switch",
        "z": "a78ae872.2b6658",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "abba",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pulse",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 200,
        "wires": [
            [
                "fcdeaf38.bf96b"
            ],
            [
                "ee9b800c.53826"
            ]
        ]
    },
    {
        "id": "875e341f.2afb58",
        "type": "delay",
        "z": "a78ae872.2b6658",
        "name": "Wait",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 580,
        "y": 160,
        "wires": [
            [
                "641fc90a.0052a8"
            ]
        ]
    },
    {
        "id": "ee9b800c.53826",
        "type": "function",
        "z": "a78ae872.2b6658",
        "name": "Check pulse",
        "func": "expected_time = flow.get('expected_time');\nclock_drift = 10; //50 millisec of clock speed drift allowed\nif(Math.abs(msg.timestamp-expected_time)<clock_drift){\n    return [{reset:true},{anomaly: false}];\n}else{\n    return[null,null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 220,
        "wires": [
            [
                "875e341f.2afb58"
            ],
            []
        ]
    },
    {
        "id": "641fc90a.0052a8",
        "type": "function",
        "z": "a78ae872.2b6658",
        "name": "Anomaly",
        "func": "\nreturn {anomaly:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 770,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "f7529a35.3cbf88",
        "type": "comment",
        "z": "43aadeb7.80972",
        "name": "CAN IDS",
        "info": "",
        "x": 1070,
        "y": 180,
        "wires": []
    }
]